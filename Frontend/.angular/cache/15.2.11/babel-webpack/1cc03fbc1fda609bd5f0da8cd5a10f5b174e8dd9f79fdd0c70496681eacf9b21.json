{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(cookieService, router) {\n    this.cookieService = cookieService;\n    this.router = router;\n  }\n  getToken() {\n    return this.cookieService.get('authToken');\n  }\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n  logout() {\n    this.cookieService.delete('authToken');\n    this.router.navigate(['/login']);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.CookieService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,WAAW;EAErBC,YAAoBC,aAA4B,EAAUC,MAAc;IAApD,kBAAa,GAAbD,aAAa;IAAyB,WAAM,GAANC,MAAM;EAAW;EAE5EC,QAAQ;IACN,OAAO,IAAI,CAACF,aAAa,CAACG,GAAG,CAAC,WAAW,CAAC;EAC5C;EAEAC,UAAU;IACR,OAAO,CAAC,CAAC,IAAI,CAACF,QAAQ,EAAE;EAC1B;EAEAG,MAAM;IACJ,IAAI,CAACL,aAAa,CAACM,MAAM,CAAC,WAAW,CAAC;IACtC,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;;;uBAfWT,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAU,SAAXV,WAAW;MAAAW,YAFV;IAAM;EAAA","names":["AuthService","constructor","cookieService","router","getToken","get","isLoggedIn","logout","delete","navigate","factory","providedIn"],"sourceRoot":"","sources":["E:\\Naman_NuvertOs\\NuvertOsAssignment_NamanGoyal\\Frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { BehaviorSubject, Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n   constructor(private cookieService: CookieService, private router: Router) {}\n\n  getToken(): string {\n    return this.cookieService.get('authToken');\n  }\n\n  isLoggedIn(): boolean {\n    return !!this.getToken();\n  }\n\n  logout(): void {\n    this.cookieService.delete('authToken');\n    this.router.navigate(['/login']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}