{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(cookieService, router) {\n    this.cookieService = cookieService;\n    this.router = router;\n    this.authStatus = new BehaviorSubject(this.isLoggedIn());\n  }\n  getToken() {\n    return this.cookieService.get('authToken');\n  }\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n  getAuthStatus() {\n    return this.authStatus.asObservable();\n  }\n  setToken(token) {\n    this.cookieService.set('authToken', token);\n    this.authStatus.next(true);\n  }\n  logout() {\n    this.cookieService.delete('authToken');\n    this.authStatus.next(false);\n    this.router.navigate(['/login']);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.CookieService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAGA,SAASA,eAAe,QAAoB,MAAM;;;;AAIlD,OAAM,MAAOC,WAAW;EAErBC,YAAoBC,aAA4B,EAAUC,MAAc;IAApD,kBAAa,GAAbD,aAAa;IAAyB,WAAM,GAANC,MAAM;IADvD,eAAU,GAAG,IAAIJ,eAAe,CAAU,IAAI,CAACK,UAAU,EAAE,CAAC;EACM;EAE5EC,QAAQ;IACN,OAAO,IAAI,CAACH,aAAa,CAACI,GAAG,CAAC,WAAW,CAAC;EAC5C;EAEAF,UAAU;IACR,OAAO,CAAC,CAAC,IAAI,CAACC,QAAQ,EAAE;EAC1B;EAGAE,aAAa;IACX,OAAO,IAAI,CAACC,UAAU,CAACC,YAAY,EAAE;EACvC;EAGAC,QAAQ,CAACC,KAAa;IACpB,IAAI,CAACT,aAAa,CAACU,GAAG,CAAC,WAAW,EAAED,KAAK,CAAC;IAC1C,IAAI,CAACH,UAAU,CAACK,IAAI,CAAC,IAAI,CAAC;EAC5B;EAEAC,MAAM;IACJ,IAAI,CAACZ,aAAa,CAACa,MAAM,CAAC,WAAW,CAAC;IACtC,IAAI,CAACP,UAAU,CAACK,IAAI,CAAC,KAAK,CAAC;IAC3B,IAAI,CAACV,MAAM,CAACa,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;;;uBA3BWhB,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAiB,SAAXjB,WAAW;MAAAkB,YAFV;IAAM;EAAA","names":["BehaviorSubject","AuthService","constructor","cookieService","router","isLoggedIn","getToken","get","getAuthStatus","authStatus","asObservable","setToken","token","set","next","logout","delete","navigate","factory","providedIn"],"sourceRoot":"","sources":["E:\\Naman_NuvertOs\\NuvertOsAssignment_NamanGoyal\\Frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { BehaviorSubject, Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n    private authStatus = new BehaviorSubject<boolean>(this.isLoggedIn());\n   constructor(private cookieService: CookieService, private router: Router) {}\n\n  getToken(): string {\n    return this.cookieService.get('authToken');\n  }\n\n  isLoggedIn(): boolean {\n    return !!this.getToken();\n  }\n\n  \n  getAuthStatus(): Observable<boolean> {\n    return this.authStatus.asObservable();\n  }\n\n  \n  setToken(token: string): void {\n    this.cookieService.set('authToken', token);\n    this.authStatus.next(true);\n  }\n\n  logout(): void {\n    this.cookieService.delete('authToken');\n    this.authStatus.next(false);\n    this.router.navigate(['/login']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}