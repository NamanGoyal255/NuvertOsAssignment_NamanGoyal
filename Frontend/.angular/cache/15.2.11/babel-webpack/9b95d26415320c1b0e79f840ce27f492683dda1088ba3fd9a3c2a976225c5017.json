{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction RegisterComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1, \" Passwords do not match. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.successMessage, \" \");\n  }\n}\nfunction RegisterComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.errorMessage, \" \");\n  }\n}\nfunction RegisterComponent_span_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 22);\n  }\n}\nconst _c0 = function () {\n  return [\"/login\"];\n};\nexport class RegisterComponent {\n  constructor(router) {\n    this.router = router;\n    this.http = inject(HttpClient);\n    this.userForm = {\n      name: \"\",\n      email: \"\",\n      password: \"\"\n    };\n    this.confirmPassword = \"\";\n    // New variables\n    this.isSubmitting = false;\n    this.successMessage = \"\";\n    this.errorMessage = \"\";\n  }\n  submitRegister() {\n    this.successMessage = \"\";\n    this.errorMessage = \"\";\n    if (this.confirmPassword !== this.userForm.password) {\n      this.errorMessage = \"Passwords do not match.\";\n      return;\n    }\n    this.isSubmitting = true;\n    this.http.post(\"http://localhost:3000/auth/register\", this.userForm).subscribe({\n      next: res => {\n        this.isSubmitting = false;\n        this.successMessage = \"User created successfully! Redirecting to login...\";\n        setTimeout(() => {\n          this.router.navigate(['/login']);\n        }, 2000);\n      },\n      error: err => {\n        this.isSubmitting = false;\n        // Try to get error message from backend or use a fallback\n        this.errorMessage = err.error?.message || \"Registration failed. Please try again.\";\n      }\n    });\n  }\n  static {\n    this.ɵfac = function RegisterComponent_Factory(t) {\n      return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RegisterComponent,\n      selectors: [[\"app-register\"]],\n      decls: 31,\n      vars: 11,\n      consts: [[1, \"register-container\", \"d-flex\", \"justify-content-center\", \"align-items-center\", \"vh-100\"], [1, \"card\", \"p-4\", \"shadow-sm\", 2, \"width\", \"100%\", \"max-width\", \"420px\"], [1, \"mb-4\", \"text-center\", \"fw-bold\"], [1, \"mb-3\"], [\"for\", \"name\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"name\", \"name\", \"name\", \"placeholder\", \"Enter your name\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"email\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"email\", \"name\", \"email\", \"placeholder\", \"Enter a valid email\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"password\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"password\", \"name\", \"password\", \"placeholder\", \"Enter password\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"confirmPassword\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"confirmPassword\", \"name\", \"confirmPassword\", \"placeholder\", \"Re-enter password\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"class\", \"text-danger mt-1\", 4, \"ngIf\"], [\"class\", \"alert alert-success\", \"role\", \"alert\", 4, \"ngIf\"], [\"class\", \"alert alert-danger\", \"role\", \"alert\", 4, \"ngIf\"], [\"type\", \"button\", \"aria-disabled\", \"\\n          isSubmitting ||\\n          !userForm.name ||\\n          !userForm.email ||\\n          !userForm.password ||\\n          !confirmPassword ||\\n          confirmPassword !== userForm.password\\n        \", 1, \"btn\", \"btn-primary\", \"w-100\", 3, \"disabled\", \"click\"], [\"class\", \"spinner-border spinner-border-sm me-2\", \"role\", \"status\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [1, \"mt-3\", \"text-center\"], [1, \"text-decoration-none\", 3, \"routerLink\"], [1, \"text-danger\", \"mt-1\"], [\"role\", \"alert\", 1, \"alert\", \"alert-success\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 1, \"spinner-border\", \"spinner-border-sm\", \"me-2\"]],\n      template: function RegisterComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\", 2);\n          i0.ɵɵtext(3, \"Register\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"form\")(5, \"div\", 3)(6, \"label\", 4);\n          i0.ɵɵtext(7, \"Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"input\", 5);\n          i0.ɵɵlistener(\"ngModelChange\", function RegisterComponent_Template_input_ngModelChange_8_listener($event) {\n            return ctx.userForm.name = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(9, \"div\", 3)(10, \"label\", 6);\n          i0.ɵɵtext(11, \"Email address\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"input\", 7);\n          i0.ɵɵlistener(\"ngModelChange\", function RegisterComponent_Template_input_ngModelChange_12_listener($event) {\n            return ctx.userForm.email = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"div\", 3)(14, \"label\", 8);\n          i0.ɵɵtext(15, \"Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"input\", 9);\n          i0.ɵɵlistener(\"ngModelChange\", function RegisterComponent_Template_input_ngModelChange_16_listener($event) {\n            return ctx.userForm.password = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(17, \"div\", 3)(18, \"label\", 10);\n          i0.ɵɵtext(19, \"Confirm Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"input\", 11);\n          i0.ɵɵlistener(\"ngModelChange\", function RegisterComponent_Template_input_ngModelChange_20_listener($event) {\n            return ctx.confirmPassword = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(21, RegisterComponent_div_21_Template, 2, 0, \"div\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(22, RegisterComponent_div_22_Template, 2, 1, \"div\", 13);\n          i0.ɵɵtemplate(23, RegisterComponent_div_23_Template, 2, 1, \"div\", 14);\n          i0.ɵɵelementStart(24, \"button\", 15);\n          i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_24_listener() {\n            return ctx.submitRegister();\n          });\n          i0.ɵɵtemplate(25, RegisterComponent_span_25_Template, 1, 0, \"span\", 16);\n          i0.ɵɵtext(26, \" Register \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(27, \"div\", 17);\n          i0.ɵɵtext(28, \" Already have an account? \");\n          i0.ɵɵelementStart(29, \"a\", 18);\n          i0.ɵɵtext(30, \"Login\");\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngModel\", ctx.userForm.name);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.userForm.email);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.userForm.password);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.confirmPassword);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.confirmPassword && ctx.confirmPassword !== ctx.userForm.password);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.successMessage);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.isSubmitting || !ctx.userForm.name || !ctx.userForm.email || !ctx.userForm.password || !ctx.confirmPassword || ctx.confirmPassword !== ctx.userForm.password);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isSubmitting);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(10, _c0));\n        }\n      },\n      dependencies: [i2.NgIf, i1.RouterLink, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm],\n      styles: [\".divider[_ngcontent-%COMP%]:after, .divider[_ngcontent-%COMP%]:before {\\r\\ncontent: \\\"\\\";\\r\\nflex: 1;\\r\\nheight: 1px;\\r\\nbackground: #eee;\\r\\n}\\r\\n.h-custom[_ngcontent-%COMP%] {\\r\\nheight: calc(100% - 73px);\\r\\n}\\r\\n@media (max-width: 450px) {\\r\\n.h-custom[_ngcontent-%COMP%] {\\r\\nheight: 100%;\\r\\n}\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2VydmljZXMvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxXQUFXO0FBQ1gsT0FBTztBQUNQLFdBQVc7QUFDWCxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi5kaXZpZGVyOmFmdGVyLFxyXG4uZGl2aWRlcjpiZWZvcmUge1xyXG5jb250ZW50OiBcIlwiO1xyXG5mbGV4OiAxO1xyXG5oZWlnaHQ6IDFweDtcclxuYmFja2dyb3VuZDogI2VlZTtcclxufVxyXG4uaC1jdXN0b20ge1xyXG5oZWlnaHQ6IGNhbGMoMTAwJSAtIDczcHgpO1xyXG59XHJcbkBtZWRpYSAobWF4LXdpZHRoOiA0NTBweCkge1xyXG4uaC1jdXN0b20ge1xyXG5oZWlnaHQ6IDEwMCU7XHJcbn1cclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["inject","HttpClient","i0","RegisterComponent","constructor","router","name","email","password","submitRegister","successMessage","errorMessage","confirmPassword","userForm","isSubmitting","http","post","subscribe","next","res","setTimeout","navigate","error","err","message","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\Naman_NuvertOs\\NuvertOsAssignment_NamanGoyal\\Frontend\\src\\app\\services\\register\\register.component.ts","E:\\Naman_NuvertOs\\NuvertOsAssignment_NamanGoyal\\Frontend\\src\\app\\services\\register\\register.component.html"],"sourcesContent":["import { Component, inject } from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http'\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent {\r\n  constructor(private router: Router) {}\r\n\r\n  http = inject(HttpClient);\r\n  userForm: UserData = {\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n  public confirmPassword: string = \"\";\r\n\r\n  // New variables\r\n  isSubmitting = false;\r\n  successMessage: string = \"\";\r\n  errorMessage: string = \"\";\r\n\r\n  submitRegister() {\r\n    this.successMessage = \"\";\r\n    this.errorMessage = \"\";\r\n\r\n    if (this.confirmPassword !== this.userForm.password) {\r\n      this.errorMessage = \"Passwords do not match.\";\r\n      return;\r\n    }\r\n\r\n    this.isSubmitting = true;\r\n\r\n    this.http.post(\"http://localhost:3000/auth/register\", this.userForm).subscribe({\r\n      next: (res: any) => {\r\n        this.isSubmitting = false;\r\n        this.successMessage = \"User created successfully! Redirecting to login...\";\r\n        setTimeout(() => {\r\n          this.router.navigate(['/login']);\r\n        }, 2000);\r\n      },\r\n      error: (err) => {\r\n        this.isSubmitting = false;\r\n        // Try to get error message from backend or use a fallback\r\n        this.errorMessage = err.error?.message || \"Registration failed. Please try again.\";\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n\r\ninterface UserData {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n}","<div class=\"register-container d-flex justify-content-center align-items-center vh-100\">\r\n  <div class=\"card p-4 shadow-sm\" style=\"width: 100%; max-width: 420px;\">\r\n    <h2 class=\"mb-4 text-center fw-bold\">Register</h2>\r\n\r\n    <form>\r\n      <!-- Name -->\r\n      <div class=\"mb-3\">\r\n        <label for=\"name\" class=\"form-label\">Name</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"name\"\r\n          name=\"name\"\r\n          class=\"form-control\"\r\n          placeholder=\"Enter your name\"\r\n          [(ngModel)]=\"userForm.name\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Email -->\r\n      <div class=\"mb-3\">\r\n        <label for=\"email\" class=\"form-label\">Email address</label>\r\n        <input\r\n          type=\"email\"\r\n          id=\"email\"\r\n          name=\"email\"\r\n          class=\"form-control\"\r\n          placeholder=\"Enter a valid email\"\r\n          [(ngModel)]=\"userForm.email\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Password -->\r\n      <div class=\"mb-3\">\r\n        <label for=\"password\" class=\"form-label\">Password</label>\r\n        <input\r\n          type=\"password\"\r\n          id=\"password\"\r\n          name=\"password\"\r\n          class=\"form-control\"\r\n          placeholder=\"Enter password\"\r\n          [(ngModel)]=\"userForm.password\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Confirm Password -->\r\n      <div class=\"mb-3\">\r\n        <label for=\"confirmPassword\" class=\"form-label\">Confirm Password</label>\r\n        <input\r\n          type=\"password\"\r\n          id=\"confirmPassword\"\r\n          name=\"confirmPassword\"\r\n          class=\"form-control\"\r\n          placeholder=\"Re-enter password\"\r\n          [(ngModel)]=\"confirmPassword\"\r\n        />\r\n        <div\r\n          *ngIf=\"confirmPassword && confirmPassword !== userForm.password\"\r\n          class=\"text-danger mt-1\"\r\n        >\r\n          Passwords do not match.\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Success and Error Messages -->\r\n      <div *ngIf=\"successMessage\" class=\"alert alert-success\" role=\"alert\">\r\n        {{ successMessage }}\r\n      </div>\r\n      <div *ngIf=\"errorMessage\" class=\"alert alert-danger\" role=\"alert\">\r\n        {{ errorMessage }}\r\n      </div>\r\n\r\n      <!-- Submit Button -->\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn btn-primary w-100\"\r\n        (click)=\"submitRegister()\"\r\n        [disabled]=\"\r\n          isSubmitting ||\r\n          !userForm.name ||\r\n          !userForm.email ||\r\n          !userForm.password ||\r\n          !confirmPassword ||\r\n          confirmPassword !== userForm.password\r\n        \"\r\n        aria-disabled=\"\r\n          isSubmitting ||\r\n          !userForm.name ||\r\n          !userForm.email ||\r\n          !userForm.password ||\r\n          !confirmPassword ||\r\n          confirmPassword !== userForm.password\r\n        \"\r\n      >\r\n        <span\r\n          *ngIf=\"isSubmitting\"\r\n          class=\"spinner-border spinner-border-sm me-2\"\r\n          role=\"status\"\r\n          aria-hidden=\"true\"\r\n        ></span>\r\n        Register\r\n      </button>\r\n\r\n      <div class=\"mt-3 text-center\">\r\n        Already have an account?\r\n        <a [routerLink]=\"['/login']\" class=\"text-decoration-none\">Login</a>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}