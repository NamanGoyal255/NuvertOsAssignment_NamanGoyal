{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nconst _c0 = function () {\n  return [\"/login\"];\n};\nconst _c1 = function () {\n  return [\"/signup\"];\n};\nfunction NavbarComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"a\", 7);\n    i0.ɵɵtext(2, \"Login\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"a\", 8);\n    i0.ɵɵtext(4, \"Signup\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(2, _c0));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(3, _c1));\n  }\n}\nfunction NavbarComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function NavbarComponent_ng_template_7_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.logout());\n    });\n    i0.ɵɵtext(1, \" Logout \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c2 = function () {\n  return [\"/compounds\"];\n};\nexport class NavbarComponent {\n  constructor(authService) {\n    this.authService = authService;\n    this.loggedIn = false;\n  }\n  ngOnInit() {\n    // Initial check\n    this.loggedIn = this.authService.isLoggedIn();\n    // Subscribe to authentication state changes\n    this.authSubscription = this.authService.getAuthStatus().subscribe(loggedIn => {\n      this.loggedIn = loggedIn;\n    });\n  }\n  ngOnDestroy() {\n    // Clean up the subscription when component is destroyed\n    if (this.authSubscription) {\n      this.authSubscription.unsubscribe();\n    }\n  }\n  logout() {\n    this.authService.logout();\n  }\n  static {\n    this.ɵfac = function NavbarComponent_Factory(t) {\n      return new (t || NavbarComponent)(i0.ɵɵdirectiveInject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: NavbarComponent,\n      selectors: [[\"navbar\"]],\n      decls: 10,\n      vars: 4,\n      consts: [[1, \"bg-[#e3f2fd]\", \"px-6\", \"py-3\", \"shadow-md\"], [1, \"max-w-7xl\", \"mx-auto\", \"flex\", \"justify-between\", \"items-center\"], [1, \"flex\", \"items-center\", \"space-x-6\", \"text-blue-900\", \"font-semibold\", \"text-lg\"], [1, \"hover:text-blue-700\", \"transition\", 3, \"routerLink\"], [1, \"flex\", \"items-center\", \"gap-4\"], [4, \"ngIf\", \"ngIfElse\"], [\"loggedInTemplate\", \"\"], [1, \"text-blue-600\", \"font-medium\", \"hover:text-blue-800\", \"transition\", 3, \"routerLink\"], [1, \"bg-blue-600\", \"text-white\", \"font-medium\", \"px-4\", \"py-2\", \"rounded\", \"hover:bg-blue-700\", \"transition\", 3, \"routerLink\"], [1, \"bg-red-600\", \"text-white\", \"font-medium\", \"px-4\", \"py-2\", \"rounded\", \"hover:bg-red-700\", \"transition\", 3, \"click\"]],\n      template: function NavbarComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"nav\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"a\", 3);\n          i0.ɵɵtext(4, \"Compounds\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"div\", 4);\n          i0.ɵɵtemplate(6, NavbarComponent_ng_container_6_Template, 5, 4, \"ng-container\", 5);\n          i0.ɵɵtemplate(7, NavbarComponent_ng_template_7_Template, 2, 0, \"ng-template\", null, 6, i0.ɵɵtemplateRefExtractor);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelement(9, \"router-outlet\");\n        }\n        if (rf & 2) {\n          const _r1 = i0.ɵɵreference(8);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(3, _c2));\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loggedIn)(\"ngIfElse\", _r1);\n        }\n      },\n      dependencies: [i2.NgIf, i3.RouterOutlet, i3.RouterLink],\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJuYXZiYXIuY29tcG9uZW50LmNzcyJ9 */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2VydmljZXMvbmF2YmFyL25hdmJhci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxnS0FBZ0siLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"mappings":";;;;;;;;;;;;IAUMA,6BAAuD;IACrDA,4BAGC;IAAAA,qBAAK;IAAAA,iBAAI;IACVA,4BAGC;IAAAA,sBAAM;IAAAA,iBAAI;IACbA,0BAAe;;;IAPXA,eAAyB;IAAzBA,uDAAyB;IAIzBA,eAA0B;IAA1BA,uDAA0B;;;;;;IAK5BA,iCAGC;IAFCA;MAAAA;MAAA;MAAA,OAASA,8BAAQ;IAAA,EAAC;IAGlBA,wBACF;IAAAA,iBAAS;;;;;;ACjBjB,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAH/B,aAAQ,GAAG,KAAK;EAG+B;EAE/CC,QAAQ;IACN;IACA,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACF,WAAW,CAACG,UAAU,EAAE;IAE7C;IACA,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACJ,WAAW,CAACK,aAAa,EAAE,CAACC,SAAS,CAC/DJ,QAAiB,IAAI;MACpB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IAC1B,CAAC,CACF;EACH;EAEAK,WAAW;IACT;IACA,IAAI,IAAI,CAACH,gBAAgB,EAAE;MACzB,IAAI,CAACA,gBAAgB,CAACI,WAAW,EAAE;;EAEvC;EAEAC,MAAM;IACJ,IAAI,CAACT,WAAW,CAACS,MAAM,EAAE;EAC3B;;;uBA3BWX,eAAe;IAAA;EAAA;;;YAAfA,eAAe;MAAAY;MAAAC;MAAAC;MAAAC;MAAAC;QAAA;UDT5BjB,8BAA8C;UAKgCA,yBAAS;UAAAA,iBAAI;UAIvFA,8BAAqC;UACnCA,kFASe;UACfA,iHAOc;UAChBA,iBAAM;UAIVA,gCAA+B;;;;UA3BiBA,eAA6B;UAA7BA,uDAA6B;UAKxDA,eAAiB;UAAjBA,oCAAiB","names":["i0","NavbarComponent","constructor","authService","ngOnInit","loggedIn","isLoggedIn","authSubscription","getAuthStatus","subscribe","ngOnDestroy","unsubscribe","logout","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["E:\\Naman_NuvertOs\\NuvertOsAssignment_NamanGoyal\\Frontend\\src\\app\\services\\navbar\\navbar.component.html","E:\\Naman_NuvertOs\\NuvertOsAssignment_NamanGoyal\\Frontend\\src\\app\\services\\navbar\\navbar.component.ts"],"sourcesContent":["<nav class=\"bg-[#e3f2fd] px-6 py-3 shadow-md\">\r\n  <div class=\"max-w-7xl mx-auto flex justify-between items-center\">\r\n    \r\n    <!-- Left Side: Navigation Links -->\r\n    <div class=\"flex items-center space-x-6 text-blue-900 font-semibold text-lg\">\r\n      <a class=\"hover:text-blue-700 transition\" [routerLink]=\"['/compounds']\">Compounds</a>\r\n    </div>\r\n\r\n    <!-- Right Side: Auth Buttons -->\r\n    <div class=\"flex items-center gap-4\">\r\n      <ng-container *ngIf=\"!loggedIn; else loggedInTemplate\">\r\n        <a\r\n          [routerLink]=\"['/login']\"\r\n          class=\"text-blue-600 font-medium hover:text-blue-800 transition\"\r\n        >Login</a>\r\n        <a\r\n          [routerLink]=\"['/signup']\"\r\n          class=\"bg-blue-600 text-white font-medium px-4 py-2 rounded hover:bg-blue-700 transition\"\r\n        >Signup</a>\r\n      </ng-container>\r\n      <ng-template #loggedInTemplate>\r\n        <button\r\n          (click)=\"logout()\"\r\n          class=\"bg-red-600 text-white font-medium px-4 py-2 rounded hover:bg-red-700 transition\"\r\n        >\r\n          Logout\r\n        </button>\r\n      </ng-template>\r\n    </div>\r\n    \r\n  </div>\r\n</nav>\r\n<router-outlet></router-outlet>\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { AuthService } from '../auth.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css']\r\n})\r\nexport class NavbarComponent implements OnInit, OnDestroy {\r\n  loggedIn = false;\r\n  private authSubscription: Subscription;\r\n\r\n  constructor(private authService: AuthService) {}\r\n\r\n  ngOnInit(): void {\r\n    // Initial check\r\n    this.loggedIn = this.authService.isLoggedIn();\r\n    \r\n    // Subscribe to authentication state changes\r\n    this.authSubscription = this.authService.getAuthStatus().subscribe(\r\n      (loggedIn: boolean) => {\r\n        this.loggedIn = loggedIn;\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // Clean up the subscription when component is destroyed\r\n    if (this.authSubscription) {\r\n      this.authSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  logout(): void {\r\n    this.authService.logout();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}