{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction EditCompoundComponent_img_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 16);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"src\", ctx_r0.form.value.image, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction EditCompoundComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.successMessage, \" \");\n  }\n}\nfunction EditCompoundComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.errorMessage, \" \");\n  }\n}\nfunction EditCompoundComponent_span_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 19);\n  }\n}\nexport class EditCompoundComponent {\n  constructor(fb, http, route, router) {\n    this.fb = fb;\n    this.http = http;\n    this.route = route;\n    this.router = router;\n    this.isSubmitting = false;\n    this.successMessage = '';\n    this.errorMessage = '';\n    this.token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'; // Replace with valid token\n  }\n\n  ngOnInit() {\n    this.id = this.route.snapshot.paramMap.get('id');\n    this.form = this.fb.group({\n      name: ['', Validators.required],\n      image: [''],\n      description: ['']\n    });\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n    this.http.get(`http://localhost:3000/compounds/${this.id}`, {\n      headers\n    }).subscribe({\n      next: data => this.form.patchValue(data),\n      error: err => this.errorMessage = 'Failed to load compound details.'\n    });\n  }\n  onSubmit() {\n    if (this.form.invalid) return;\n    this.isSubmitting = true;\n    this.successMessage = '';\n    this.errorMessage = '';\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n    this.http.put(`http://localhost:3000/compounds/${this.id}`, this.form.value, {\n      headers\n    }).subscribe({\n      next: () => {\n        this.successMessage = 'Compound updated successfully!';\n        this.router.navigate(['/compounds', this.id]); // Optional: navigate after short delay\n      },\n\n      error: err => {\n        this.errorMessage = err.error?.message || 'Failed to update compound.';\n      },\n      complete: () => {\n        this.isSubmitting = false;\n      }\n    });\n  }\n  static {\n    this.ɵfac = function EditCompoundComponent_Factory(t) {\n      return new (t || EditCompoundComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: EditCompoundComponent,\n      selectors: [[\"app-edit-compound\"]],\n      decls: 23,\n      vars: 6,\n      consts: [[1, \"edit-container\", \"d-flex\", \"justify-content-center\", \"align-items-center\", \"vh-100\"], [1, \"card\", \"p-4\", \"shadow-sm\", 2, \"width\", \"100%\", \"max-width\", \"600px\"], [1, \"mb-4\", \"text-center\", \"fw-bold\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"name\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"name\", \"placeholder\", \"Enter compound name\", \"formControlName\", \"name\", 1, \"form-control\"], [\"for\", \"image\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"image\", \"placeholder\", \"Enter image URL\", \"formControlName\", \"image\", 1, \"form-control\"], [\"alt\", \"Compound image\", \"class\", \"img-fluid mt-2 border rounded\", \"style\", \"max-height: 200px\", 3, \"src\", 4, \"ngIf\"], [\"for\", \"description\", 1, \"form-label\"], [\"id\", \"description\", \"rows\", \"5\", \"placeholder\", \"Enter compound description\", \"formControlName\", \"description\", 1, \"form-control\"], [\"class\", \"alert alert-success\", \"role\", \"alert\", 4, \"ngIf\"], [\"class\", \"alert alert-danger\", \"role\", \"alert\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", \"w-100\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-2\", \"role\", \"status\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"alt\", \"Compound image\", 1, \"img-fluid\", \"mt-2\", \"border\", \"rounded\", 2, \"max-height\", \"200px\", 3, \"src\"], [\"role\", \"alert\", 1, \"alert\", \"alert-success\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 1, \"spinner-border\", \"spinner-border-sm\", \"me-2\"]],\n      template: function EditCompoundComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\", 2);\n          i0.ɵɵtext(3, \"Edit Compound\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"form\", 3);\n          i0.ɵɵlistener(\"ngSubmit\", function EditCompoundComponent_Template_form_ngSubmit_4_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n          i0.ɵɵtext(7, \"Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(8, \"input\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\", 4)(10, \"label\", 7);\n          i0.ɵɵtext(11, \"Image URL\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 8);\n          i0.ɵɵtemplate(13, EditCompoundComponent_img_13_Template, 1, 1, \"img\", 9);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"div\", 4)(15, \"label\", 10);\n          i0.ɵɵtext(16, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(17, \"textarea\", 11);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(18, EditCompoundComponent_div_18_Template, 2, 1, \"div\", 12);\n          i0.ɵɵtemplate(19, EditCompoundComponent_div_19_Template, 2, 1, \"div\", 13);\n          i0.ɵɵelementStart(20, \"button\", 14);\n          i0.ɵɵtemplate(21, EditCompoundComponent_span_21_Template, 1, 0, \"span\", 15);\n          i0.ɵɵtext(22, \" Save Changes \");\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"formGroup\", ctx.form);\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"ngIf\", ctx.form.value.image);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.successMessage);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.form.invalid || ctx.isSubmitting);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isSubmitting);\n        }\n      },\n      dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup],\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Validators","HttpHeaders","i0","EditCompoundComponent","constructor","fb","http","route","router","ngOnInit","id","snapshot","paramMap","get","form","group","name","required","image","description","headers","set","token","subscribe","next","data","patchValue","error","err","errorMessage","onSubmit","invalid","isSubmitting","successMessage","put","value","navigate","message","complete","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\Naman_NuvertOs\\NuvertOsAssignment_NamanGoyal\\Frontend\\src\\app\\services\\edit-compound\\edit-compound.component.ts","E:\\Naman_NuvertOs\\NuvertOsAssignment_NamanGoyal\\Frontend\\src\\app\\services\\edit-compound\\edit-compound.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Component({\n  selector: 'app-edit-compound',\n  templateUrl: './edit-compound.component.html',\n  styleUrls: ['./edit-compound.component.css']\n})\nexport class EditCompoundComponent implements OnInit {\n  form!: FormGroup;\n  id!: string;\n  isSubmitting = false;\n  successMessage = '';\n  errorMessage = '';\n\n  private token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'; // Replace with valid token\n\n  constructor(\n    private fb: FormBuilder,\n    private http: HttpClient,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    this.id = this.route.snapshot.paramMap.get('id')!;\n    this.form = this.fb.group({\n      name: ['', Validators.required],\n      image: [''],\n      description: ['']\n    });\n\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n\n    this.http.get<any>(`http://localhost:3000/compounds/${this.id}`, { headers }).subscribe({\n      next: (data) => this.form.patchValue(data),\n      error: (err) => this.errorMessage = 'Failed to load compound details.'\n    });\n  }\n\n  onSubmit() {\n    if (this.form.invalid) return;\n\n    this.isSubmitting = true;\n    this.successMessage = '';\n    this.errorMessage = '';\n\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n\n    this.http.put(`http://localhost:3000/compounds/${this.id}`, this.form.value, { headers }).subscribe({\n      next: () => {\n        this.successMessage = 'Compound updated successfully!';\n        this.router.navigate(['/compounds', this.id]); // Optional: navigate after short delay\n      },\n      error: (err) => {\n        this.errorMessage = err.error?.message || 'Failed to update compound.';\n      },\n      complete: () => {\n        this.isSubmitting = false;\n      }\n    });\n  }\n}\n","<div class=\"edit-container d-flex justify-content-center align-items-center vh-100\">\n  <div class=\"card p-4 shadow-sm\" style=\"width: 100%; max-width: 600px;\">\n    <h2 class=\"mb-4 text-center fw-bold\">Edit Compound</h2>\n\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n      <!-- Name -->\n      <div class=\"mb-3\">\n        <label for=\"name\" class=\"form-label\">Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          class=\"form-control\"\n          placeholder=\"Enter compound name\"\n          formControlName=\"name\"\n        />\n      </div>\n\n      <!-- Image URL -->\n      <div class=\"mb-3\">\n        <label for=\"image\" class=\"form-label\">Image URL</label>\n        <input\n          type=\"text\"\n          id=\"image\"\n          class=\"form-control\"\n          placeholder=\"Enter image URL\"\n          formControlName=\"image\"\n        />\n        <img\n          *ngIf=\"form.value.image\"\n          [src]=\"form.value.image\"\n          alt=\"Compound image\"\n          class=\"img-fluid mt-2 border rounded\"\n          style=\"max-height: 200px\"\n        />\n      </div>\n\n      <!-- Description -->\n      <div class=\"mb-3\">\n        <label for=\"description\" class=\"form-label\">Description</label>\n        <textarea\n          id=\"description\"\n          rows=\"5\"\n          class=\"form-control\"\n          placeholder=\"Enter compound description\"\n          formControlName=\"description\"\n        ></textarea>\n      </div>\n\n      <!-- Messages -->\n      <div *ngIf=\"successMessage\" class=\"alert alert-success\" role=\"alert\">\n        {{ successMessage }}\n      </div>\n      <div *ngIf=\"errorMessage\" class=\"alert alert-danger\" role=\"alert\">\n        {{ errorMessage }}\n      </div>\n\n      <!-- Save Button -->\n      <button\n        type=\"submit\"\n        class=\"btn btn-success w-100\"\n        [disabled]=\"form.invalid || isSubmitting\"\n      >\n        <span\n          *ngIf=\"isSubmitting\"\n          class=\"spinner-border spinner-border-sm me-2\"\n          role=\"status\"\n          aria-hidden=\"true\"\n        ></span>\n        Save Changes\n      </button>\n    </form>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}